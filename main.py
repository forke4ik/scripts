import logging
import os
import asyncio
import aiohttp
import json
from datetime import datetime, timedelta
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    BotCommand,
    ChatMember
)
from telegram.constants import ParseMode
from telegram.error import Forbidden, BadRequest
from telegram.ext import (
    Application, 
    CommandHandler, 
    ContextTypes, 
    CallbackQueryHandler
)
from quart import Quart, request, Response
from io import BytesIO

TOKEN = os.environ.get("TOKEN")
CREATOR_ID = int(os.environ.get("CREATOR_ID", "7106925462"))  
CHANNEL_ID = int(os.environ.get("CHANNEL_ID", "-1002699957973"))  
CHANNEL_LINK = os.environ.get("CHANNEL_LINK", "https://t.me/+57Wq6w2wbYhkNjYy")
WEBHOOK_PATH = "webhook"
SELF_PING_URL = "https://miaphotoroom.onrender.com"
PING_INTERVAL = 600  

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ping_task = None
cleanup_task = None  

stats_data = {
    "users": {},
    "events": [],
    "channel_joins": []
}

async def save_user(user):
    stats_data["users"][user.id] = {
        "user_id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "country_code": None,
        "device_type": None,
        "start_time": datetime.utcnow().isoformat()
    }
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç–∏")

async def log_event(user_id, event_type):
    stats_data["events"].append({
        "user_id": user_id,
        "event_type": event_type,
        "event_time": datetime.utcnow().isoformat()
    })
    logger.info(f"üìù –°–æ–±—ã—Ç–∏–µ '{event_type}' –¥–ª—è {user_id} –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–∞–º—è—Ç—å")

async def log_channel_join(user_id):
    if user_id not in stats_data["channel_joins"]:
        stats_data["channel_joins"].append(user_id)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–∞–Ω–∞–ª (–≤ –ø–∞–º—è—Ç–∏)")

async def is_user_joined(user_id):
    return user_id in stats_data["channel_joins"]

def get_basic_stats():
    one_week_ago = datetime.utcnow() - timedelta(days=7)
    
    total_users = len(stats_data["users"])
    
    active_users_week = len(set(
        event["user_id"] for event in stats_data["events"]
        if datetime.fromisoformat(event["event_time"]) >= one_week_ago
    ))
    
    channel_joins_week = len([
        user_id for user_id in stats_data["channel_joins"]
        if any(
            datetime.fromisoformat(event["event_time"]) >= one_week_ago
            for event in stats_data["events"]
            if event["user_id"] == user_id and event["event_type"] == "channel_join"
        )
    ])
    
    return {
        "total_users": total_users,
        "active_users_week": active_users_week,
        "channel_joins_week": channel_joins_week
    }

async def setup_menu(application: Application):
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"),
        BotCommand("channel", "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É"),
        BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"),
    ]
    await application.bot.set_my_commands(commands)
    logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logger.info(f"Received /start command from user {user.id}")
    await save_user(user)
    await log_event(user.id, 'start')
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_subscription')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=reply_markup
        )
        logger.info(f"Sent /start response to user {user.id}")
    except Exception as e:
        logger.error(f"Error sending /start response to user {user.id}: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/channel - –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É\n"
        "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª\n"
        "\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª</b>, "
        "—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É."
    )
    await update.message.reply_html(help_text)

async def channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_subscription')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        reply_markup=reply_markup
    )

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await check_subscription(update, context)

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if query:
        await query.answer()
        user = query.from_user
        message = query.message
    else:
        user = update.effective_user
        message = update.message
    logger.info(f"Checking subscription for user {user.id}")
    await save_user(user)
    await log_event(user.id, 'subscription_check')
    try:
        chat_member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user.id)
        is_member = chat_member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
        if is_member:
            await log_channel_join(user.id)
            await log_event(user.id, 'channel_join')
            response_text = (
                f"üéâ –û—Ç–ª–∏—á–Ω–æ, {user.mention_html()}! –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
                "–ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:\n"
                f"üëâ {CHANNEL_LINK}\n"
                "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π - –≤–º–µ—Å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!"
            )
            if query:
                await query.edit_message_text(
                    text=response_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=None
                )
            else:
                await message.reply_html(response_text)
        else:
            response_text = (
                f"‚ùå {user.mention_html()}, —Ç—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–æ–≤–∞."
            )
            keyboard = [
                [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_subscription')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if query:
                await query.edit_message_text(
                    text=response_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
            else:
                await message.reply_html(
                    response_text,
                    reply_markup=reply_markup
                )
    except Forbidden as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        error_text = (
            "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç:\n"
            "1. –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞\n"
            "2. –ò–º–µ–µ—Ç –ø—Ä–∞–≤–æ '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"
        )
        if query:
            await query.edit_message_text(error_text)
        else:
            await message.reply_text(error_text)
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        error_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        if query:
            await query.edit_message_text(error_text)
        else:
            await message.reply_text(error_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        error_text = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        if query:
            await query.edit_message_text(error_text)
        else:
            await message.reply_text(error_text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user.id != CREATOR_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    basic_stats = get_basic_stats()
    
    message = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n"
        f"üë§ <u>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</u>\n"
        f"  –í—Å–µ–≥–æ: <b>{basic_stats['total_users']}</b>\n"
        f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{basic_stats['active_users_week']}</b>\n"
        f"  –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: <b>{basic_stats['channel_joins_week']}</b>\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    try:
        await update.message.reply_html(message)
        
        stats_json = json.dumps(stats_data, indent=2, default=str, ensure_ascii=False)
        await update.message.reply_document(
            document=BytesIO(stats_json.encode('utf-8')),
            filename='bot_stats.json',
            caption="–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )
        logger.info(f"Sent stats to creator {user.id}")
    except Exception as e:
        logger.error(f"Error sending stats: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def self_ping():
    while True:
        try:
            await asyncio.sleep(PING_INTERVAL)
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–ø–∏–Ω–≥ –≤ {timestamp}")
                async with session.get(f"{SELF_PING_URL}/") as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"‚úÖ –°–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {data.get('status', 'OK')}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –°–∞–º–æ–ø–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
        except asyncio.CancelledError:
            logger.info("üõë –°–∞–º–æ–ø–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞: {e}")

if not TOKEN:
    logger.error("Error: Bot TOKEN not found in environment variables!")
    raise ValueError("Bot TOKEN not set")

logger.info("Creating Application object...")
telegram_application = Application.builder().token(TOKEN).build()
logger.info("Application object created.")

logger.info("Adding command handlers...")
telegram_application.add_handler(CommandHandler("start", start))
telegram_application.add_handler(CommandHandler("help", help_command))
telegram_application.add_handler(CommandHandler("channel", channel_command))
telegram_application.add_handler(CommandHandler("check", check_command))
telegram_application.add_handler(CommandHandler("stats", stats_command))
telegram_application.add_handler(CallbackQueryHandler(check_subscription, pattern='^check_subscription$'))
logger.info("Command handlers added.")

app = Quart(__name__)
logger.info("Quart app created.")

is_application_initialized = False

@app.before_serving
async def startup():
    global ping_task
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∞–º–æ–ø–∏–Ω–≥–∞...")
    ping_task = asyncio.create_task(self_ping())
    logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥...")
    await setup_menu(telegram_application)

@app.after_serving
async def shutdown():
    global ping_task
    if ping_task:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞...")
        ping_task.cancel()
        try:
            await ping_task
        except asyncio.CancelledError:
            pass

@app.route(f"/{WEBHOOK_PATH}", methods=["POST"])
async def telegram_webhook_handler():
    global is_application_initialized
    logger.info("Received POST request on /webhook")
    if not is_application_initialized:
        logger.info("Initializing Application...")
        try:
            await telegram_application.initialize()
            is_application_initialized = True
            logger.info("Application initialized.")
        except Exception as e:
            logger.error(f"Error during Application initialization: {e}")
            return Response(status=500)
    update_json = await request.get_json()
    if not update_json:
        logger.warning("Received empty webhook request")
        return Response(status=400)
    logger.info("Received update JSON, attempting to parse...")
    try:
        update = Update.de_json(update_json, telegram_application.bot)
        logger.info(f"Update parsed: {update.update_id}")
    except Exception as e:
         logger.error(f"Error parsing update JSON: {e}")
         return Response(status=400)
    logger.info(f"Processing update {update.update_id} using application.process_update...")
    try:
        await telegram_application.process_update(update)
        logger.info(f"Update {update.update_id} processing finished.")
    except Exception as e:
        logger.error(f"Error processing update {update.update_id} in Application: {e}")
        pass
    logger.info("Returning 200 OK to Telegram")
    return Response(status=200)

@app.route("/", methods=["GET"])
async def health_check():
    basic_stats = get_basic_stats()
    return {
        "status": "Bot is running", 
        "webhook_url": f"/{WEBHOOK_PATH}",
        "ping_status": "active" if ping_task and not ping_task.done() else "inactive",
        "timestamp": datetime.now().isoformat(),
        "stats": basic_stats
    }

@app.route("/set_webhook", methods=["GET"])
async def set_webhook():
    webhook_url = f"{SELF_PING_URL}/webhook"
    try:
        global is_application_initialized
        if not is_application_initialized:
            await telegram_application.initialize()
            is_application_initialized = True
        await telegram_application.bot.set_webhook(webhook_url)
        logger.info(f"Webhook set to: {webhook_url}")
        return {"status": "success", "webhook_url": webhook_url}
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")
        return {"status": "error", "error": str(e)}

@app.route("/ping_status", methods=["GET"])
async def ping_status():
    return {
        "ping_active": ping_task and not ping_task.done(),
        "ping_interval": PING_INTERVAL,
        "self_ping_url": SELF_PING_URL,
        "timestamp": datetime.now().isoformat()
    }

logger.info("ASGI application ready.")
